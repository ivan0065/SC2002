package Main;

import Main.BTO.BTOProject;
import Main.BTO.FlatList;
import Main.BTO.ProjectDatabase;
import Main.Enquiries.Enquiry;
import Main.Enquiries.EnquiryList;
import Main.Enums.FilterCriteria;
import Main.Enums.FlatType;
import Main.Enums.MaritalStatus;
import Main.Enums.UserRole;
import Main.Manager_control.BTOApplication;
import Main.Personnel.Applicant;
import Main.Personnel.HDBManager;
import Main.Personnel.HDBOfficer;
import Main.Personnel.User;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class AppManager {
    private List<User> users; // List of all users
    private ProjectDatabase projectDatabase; // Database of BTO projects
    private EnquiryList enquiryList; // List of all enquiries
    private List<BTOApplication> applications; // List of all BTO applications

    // Constructor
    public AppManager() {
        this.users = new ArrayList<>();
        this.projectDatabase = new ProjectDatabase();
        this.enquiryList = new EnquiryList();
        this.applications = new ArrayList<>();
    }

    // Initialize user list from a file
    public void initializeUserList(List<String> userData) {
        for (String data : userData) {
            // Assuming data format: "NRIC,password,age,maritalStatus,role"
            String[] parts = data.split(",");
            String nric = parts[0];
            String password = parts[1];
            int age = Integer.parseInt(parts[2]);
            MaritalStatus maritalStatus = MaritalStatus.valueOf(parts[3]);
            UserRole role = UserRole.valueOf(parts[4]);

            User user;
            switch (role) {
                case APPLICANT:
                    user = new Applicant(nric, password, age, maritalStatus, role);
                    break;
                case HDB_OFFICER:
                    user = new HDBOfficer(nric, password, age, maritalStatus, role);
                    break;
                case HDB_MANAGER:
                    user = new HDBManager(nric, password, age, maritalStatus, role, null, null, null);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid user role: " + role);
            }
            users.add(user);
        }
    }

    // Login
    public User login(String userID, String password) {
        for (User user : users) {
            if (user.getUserID().equals(userID) && user.checkPassword(password)) {
                System.out.println("Login successful for user: " + userID);
                return user;
            }
        }
        System.out.println("Login failed. Invalid userID or password.");
        return null;
    }

    // Change password
    public void changePassword(User user, String newPassword) {
        user.changePassword(true, newPassword);
        System.out.println("Password changed successfully for user: " + user.getUserID());
    }

    // Generate all BTO applications (from UML attribute treated as method)
    public List<BTOApplication> generateBTOApplications() {
        return new ArrayList<>(applications);
    }

    // View all BTO applications (from UML attribute treated as method)
    public List<BTOApplication> viewBTOApplications() {
        return new ArrayList<>(applications);
    }

    // Create a BTO project (HDB Manager only)
    public void createBTOProject(HDBManager manager, String projectName, String neighborhood, List<FlatType> flatTypes, int twoRoomUnits, int threeRoomUnits, LocalDate openingDate, LocalDate closingDate) {
        FlatList flatList = new FlatList();
        flatList.getavail_byroom().put(FlatType.Two_Room, twoRoomUnits);
        flatList.getavail_byroom().put(FlatType.Three_Room, threeRoomUnits);

        BTOProject project = new BTOProject(
            manager, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(),
            projectName, openingDate, closingDate, false, "OPEN",
            flatTypes, neighborhood, flatList, java.util.UUID.randomUUID().toString()
        );
        projectDatabase.addProject(project);
        System.out.println("BTO Project created: " + projectName);
    }

    // Update project flat counts (HDB Officer only)
    public void updateProject(HDBOfficer officer, String projectName, String flatType, int numOfUnits) {
        BTOProject project = projectDatabase.getProjectByName(projectName);
        if (project == null) {
            System.out.println("Project not found: " + projectName);
            return;
        }
        if (!officer.getAssignedProjects().contains(project)) {
            System.out.println("You are not assigned to this project.");
            return;
        }

        FlatList flatList = project.getFlatLists();
        FlatType type = flatType.equalsIgnoreCase("2-Room") ? FlatType.Two_Room : FlatType.Three_Room;
        int currentUnits = flatList.getavail_byroom().get(type);
        int difference = numOfUnits - currentUnits;

        if (difference > 0) {
            // Add more units (unbook flats to increase availability)
            for (int i = 0; i < difference; i++) {
                if (type == FlatType.Two_Room) {
                    flatList.unbook_2room();
                } else {
                    flatList.unbook_3room();
                }
            }
        } else if (difference < 0) {
            // Reduce units (book flats to decrease availability)
            for (int i = 0; i < -difference; i++) {
                if (type == FlatType.Two_Room) {
                    flatList.book_2room();
                } else {
                    flatList.book_3room();
                }
            }
        }
        System.out.println("Updated flat count for " + flatType + " in project " + projectName + " to " + numOfUnits);
    }

    // Update BTO application status and confirm flat type (HDB Officer only)
    public void updateBTOApplication(HDBOfficer officer, String applicationId, String newStatus, String flatType) {
        BTOApplication application = getApplicationById(applicationId);
        if (application == null) {
            System.out.println("Application not found: " + applicationId);
            return;
        }
        BTOProject project = projectDatabase.getProjectById(application.getProjectId());
        if (!officer.getAssignedProjects().contains(project)) {
            System.out.println("You are not assigned to this project.");
            return;
        }

        // Verify flat type matches the application
        FlatType expectedType = flatType.equalsIgnoreCase("2-Room") ? FlatType.Two_Room : FlatType.Three_Room;
        if (application.getFlatType() != expectedType) {
            System.out.println("Flat type mismatch. Application flat type is " + application.getFlatType());
            return;
        }

        // Update status
        if (newStatus.equals("BOOKED") && application.getApplicationStatus().equals("SUCCESSFUL")) {
            application.setApplicationStatus(newStatus);
            FlatList flatList = project.getFlatLists();
            if (expectedType == FlatType.Two_Room) {
                flatList.book_2room();
            } else {
                flatList.book_3room();
            }
            System.out.println("Application " + applicationId + " updated to status: " + newStatus);
        } else {
            System.out.println("Cannot update application status to " + newStatus + ". Current status: " + application.getApplicationStatus());
        }
    }

    // Get BTO application by applicant NRIC
    public BTOApplication getBTOApplication(String applicantNRIC) {
        for (BTOApplication app : applications) {
            if (app.getApplicantId().equals(applicantNRIC)) {
                return app;
            }
        }
        return null;
    }

    // Toggle project visibility (HDB Manager only)
    public void toggleVisibility(HDBManager manager, String projectId, boolean visibility) {
        BTOProject project = projectDatabase.getProjectById(projectId);
        if (project != null && project.getHDBManagerInCharge().getUserID().equals(manager.getUserID())) {
            project.setVisible(visibility);
            System.out.println("Project visibility updated: " + project.getProjectName() + " is now " + (visibility ? "visible" : "hidden"));
        } else {
            System.out.println("Project not found or you are not the manager in charge.");
        }
    }

    // View a specific BTO project
    public void viewBTOProject(String projectId) {
        BTOProject project = projectDatabase.getProjectById(projectId);
        if (project != null) {
            project.displayProject();
        } else {
            System.out.println("Project not found: " + projectId);
        }
    }

    // View BTO projects with filtering
    public List<BTOProject> viewBTOProjects(User user, FilterCriteria criteria) {
        List<BTOProject> filteredProjects = new ArrayList<>();
        for (BTOProject project : projectDatabase.getAllProjects()) {
            // Applicants can only see visible projects applicable to their group
            if (user.getRole() == UserRole.APPLICANT) {
                Applicant applicant = (Applicant) user;
                if (project.getVisibilitySetting() && project.isApplicableFor(applicant.getAge(), applicant.getMaritalStatus() == MaritalStatus.MARRIED)) {
                    filteredProjects.add(project);
                }
            }
            // HDB Officers can see their assigned projects regardless of visibility
            else if (user.getRole() == UserRole.HDB_OFFICER) {
                HDBOfficer officer = (HDBOfficer) user;
                if (officer.getAssignedProjects().contains(project) || (project.getVisibilitySetting() && project.isApplicableFor(officer.getAge(), officer.getMaritalStatus() == MaritalStatus.MARRIED))) {
                    filteredProjects.add(project);
                }
            }
            // HDB Managers can see all projects
            else if (user.getRole() == UserRole.HDB_MANAGER) {
                filteredProjects.add(project);
            }
        }

        // Apply FilterCriteria
        List<BTOProject> result = new ArrayList<>();
        for (BTOProject project : filteredProjects) {
            boolean matchesCriteria = true;
            switch (criteria) {
                case ALL:
                    break;
                case MARRIED:
                    if (user.getMaritalStatus() != MaritalStatus.MARRIED) matchesCriteria = false;
                    break;
                case SINGLE:
                    if (user.getMaritalStatus() != MaritalStatus.SINGLE) matchesCriteria = false;
                    break;
                case Youths:
                    if (user.getAge() >= 35) matchesCriteria = false;
                    break;
                case Middle_aged:
                    if (user.getAge() < 35 || user.getAge() >= 55) matchesCriteria = false;
                    break;
                case Elderly:
                    if (user.getAge() < 55) matchesCriteria = false;
                    break;
                case Flat_type_2room:
                    if (!project.getFlatTypes().contains(FlatType.Two_Room)) matchesCriteria = false;
                    break;
                case Flat_type_3room:
                    if (!project.getFlatTypes().contains(FlatType.Three_Room)) matchesCriteria = false;
                    break;
            }
            if (matchesCriteria) {
                result.add(project);
            }
        }

        // Sort alphabetically by default
        result.sort((p1, p2) -> p1.getProjectName().compareTo(p2.getProjectName()));
        return result;
    }

    // Apply for a BTO project
    public void applyBTO(Applicant applicant, String projectId, FlatType flatType) {
        applicant.applyBTO(projectId, flatType);
        BTOApplication application = getApplicationById(applicant.getCurrentApplicationId());
        if (application != null) {
            applications.add(application);
        }
    }

    // Withdraw an application
    public void withdrawApplication(Applicant applicant) {
        BTOApplication application = getApplicationById(applicant.getCurrentApplicationId());
        if (application != null) {
            application.requestWithdrawal();
            System.out.println("Withdrawal request submitted for application: " + application.getApplicationId());
        } else {
            System.out.println("No active application found to withdraw.");
        }
    }

    // View application status
    public String viewApplicationStatus(Applicant applicant) {
        return applicant.viewApplicationStatus();
    }

    // Submit an enquiry
    public void submitEnquiry(User user, String projectId, String enquiryString) {
        BTOProject project = projectDatabase.getProjectById(projectId);
        if (project == null) {
            System.out.println("Project not found: " + projectId);
            return;
        }
        Enquiry enquiry = new Enquiry(enquiryString, enquiryList.getEnquiries().size() + 1, user);
        enquiryList.addEnquiry(enquiry);
        if (user.getRole() == UserRole.APPLICANT || user.getRole() == UserRole.HDB_OFFICER) {
            Applicant applicant = (Applicant) user;
            applicant.createEnquiry(String.valueOf(enquiry.getEnquiryID()));
        }
        System.out.println("Enquiry submitted: ID " + enquiry.getEnquiryID());
    }

    // View enquiries
    public void viewEnquiry(User user) {
        if (user.getRole() == UserRole.APPLICANT || user.getRole() == UserRole.HDB_OFFICER) {
            Applicant applicant = (Applicant) user;
            for (String enquiryId : applicant.getEnquiryIds()) {
                Enquiry enquiry = enquiryList.getEnquiryByID(Integer.parseInt(enquiryId));
                if (enquiry != null) {
                    enquiry.printEnquiry();
                }
            }
        } else if (user.getRole() == UserRole.HDB_MANAGER) {
            HDBManager manager = (HDBManager) user;
            for (Enquiry enquiry : enquiryList.getEnquiries()) {
                BTOProject project = projectDatabase.getProjectById(enquiry.getProject());
                if (project != null && project.getHDBManagerInCharge().getUserID().equals(manager.getUserID())) {
                    enquiry.printEnquiry();
                }
            }
        }
    }

    // Edit enquiry (Applicants only)
    public void editEnquiry(Applicant applicant, String enquiryId, String newEnquiryString) {
        Enquiry enquiry = enquiryList.getEnquiryByID(Integer.parseInt(enquiryId));
        if (enquiry != null && applicant.getEnquiryIds().contains(enquiryId)) {
            enquiry.setQuestion(newEnquiryString);
            System.out.println("Enquiry updated: ID " + enquiryId);
        } else {
            System.out.println("Enquiry not found or you do not have permission to edit it.");
        }
    }

    // Delete enquiry (Applicants only)
    public void deleteEnquiry(Applicant applicant, String enquiryId) {
        Enquiry enquiry = enquiryList.getEnquiryByID(Integer.parseInt(enquiryId));
        if (enquiry != null && applicant.deleteEnquiry(enquiryId)) {
            enquiryList.removeEnquiry(enquiry);
            System.out.println("Enquiry deleted: ID " + enquiryId);
        } else {
            System.out.println("Enquiry not found.");
        }
    }

    // Reply to enquiry (HDB Officer only, per UML)
    public void replyEnquiry(HDBOfficer officer, String enquiryId, String reply) {
        Enquiry enquiry = enquiryList.getEnquiryByID(Integer.parseInt(enquiryId));
        if (enquiry == null) {
            System.out.println("Enquiry not found: " + enquiryId);
            return;
        }
        BTOProject project = projectDatabase.getProjectById(enquiry.getProject());
        if (officer.getAssignedProjects().contains(project)) {
            officer.replyEnquiry(enquiry, reply);
            System.out.println("Reply added to enquiry: ID " + enquiryId);
        } else {
            System.out.println("You are not assigned to this project.");
        }
    }

    // Book a flat (HDB Officer only)
    public void bookFlat(HDBOfficer officer, String applicationId) {
        BTOApplication application = getApplicationById(applicationId);
        if (application == null) {
            System.out.println("Application not found: " + applicationId);
            return;
        }
        BTOProject project = projectDatabase.getProjectById(application.getProjectId());
        if (!officer.getAssignedProjects().contains(project)) {
            System.out.println("You are not assigned to this project.");
            return;
        }
        if (application.bookFlat(officer.getUserID())) {
            System.out.println("Flat booked successfully for application: " + applicationId);
        }
    }

    // Generate report (HDB Manager only)
    public void generateReport(HDBManager manager, FilterCriteria criteria) {
        List<BTOApplication> filteredApplications = new ArrayList<>();
        for (BTOProject project : projectDatabase.getAllProjects()) {
            if (project.getHDBManagerInCharge().getUserID().equals(manager.getUserID())) {
                filteredApplications.addAll(project.getApplications());
            }
        }

        List<BTOApplication> result = new ArrayList<>();
        for (BTOApplication app : filteredApplications) {
            Applicant applicant = getApplicantByNRIC(app.getApplicantId());
            if (applicant == null) continue;
            boolean matchesCriteria = true;
            switch (criteria) {
                case ALL:
                    break;
                case MARRIED:
                    if (applicant.getMaritalStatus() != MaritalStatus.MARRIED) matchesCriteria = false;
                    break;
                case SINGLE:
                    if (applicant.getMaritalStatus() != MaritalStatus.SINGLE) matchesCriteria = false;
                    break;
                case Youths:
                    if (applicant.getAge() >= 35) matchesCriteria = false;
                    break;
                case Middle_aged:
                    if (applicant.getAge() < 35 || applicant.getAge() >= 55) matchesCriteria = false;
                    break;
                case Elderly:
                    if (applicant.getAge() < 55) matchesCriteria = false;
                    break;
                case Flat_type_2room:
                    if (app.getFlatType() != FlatType.Two_Room) matchesCriteria = false;
                    break;
                case Flat_type_3room:
                    if (app.getFlatType() != FlatType.Three_Room) matchesCriteria = false;
                    break;
            }
            if (matchesCriteria) {
                result.add(app);
            }
        }

        System.out.println("===== BTO Application Report =====");
        for (BTOApplication app : result) {
            Applicant applicant = getApplicantByNRIC(app.getApplicantId());
            BTOProject project = projectDatabase.getProjectById(app.getProjectId());
            System.out.println("Applicant NRIC: " + app.getApplicantId());
            System.out.println("Age: " + applicant.getAge());
            System.out.println("Marital Status: " + applicant.getMaritalStatus());
            System.out.println("Flat Type: " + app.getFlatType());
            System.out.println("Project Name: " + (project != null ? project.getProjectName() : "Unknown"));
            System.out.println("-----------------------------");
        }
    }

    // Helper method to get application by ID
    private BTOApplication getApplicationById(String applicationId) {
        for (BTOApplication app : applications) {
            if (app.getApplicationId().equals(applicationId)) {
                return app;
            }
        }
        return null;
    }

    // Helper method to get applicant by NRIC
    private Applicant getApplicantByNRIC(String nric) {
        for (User user : users) {
            if (user.getUserID().equals(nric) && (user.getRole() == UserRole.APPLICANT || user.getRole() == UserRole.HDB_OFFICER)) {
                return (Applicant) user;
            }
        }
        return null;
    }
}
